// <auto-generated />
using System;
using System.Collections.Generic;
using DungeonsAndDespair.API.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DungeonsAndDespair.API.Migrations
{
    [DbContext(typeof(DnDsprContext))]
    [Migration("20231018034734_Initial_Commit")]
    partial class Initial_Commit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ArmorTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ca")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedAtId")
                        .HasColumnType("uuid");

                    b.Property<double>("DefaultQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumArmorClass")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<bool>("StealthAbility")
                        .HasColumnType("boolean");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<double>("lb")
                        .HasColumnType("double precision");

                    b.Property<char>("type")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtId");

                    b.ToTable("ArmorTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("UsersId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Class");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Class");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassCharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassCharacteristicId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassCharacteristic");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Commit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArmorTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EquipamentTemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RaceTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShieldTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WeaponTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArmorTemplateId");

                    b.HasIndex("ClassTemplatesId");

                    b.HasIndex("CommitId");

                    b.HasIndex("EquipamentTemplateId");

                    b.HasIndex("RaceTemplatesId");

                    b.HasIndex("ShieldTemplateId");

                    b.HasIndex("WeaponTemplateId");

                    b.ToTable("Feed");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.EquipamentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedAtId")
                        .HasColumnType("uuid");

                    b.Property<double>("DefaultQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<double>("lb")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtId");

                    b.ToTable("EquipamentTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SendAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicsId");

                    b.HasIndex("UserId");

                    b.ToTable("Race");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Race");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.RaceCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RaceCharacteristic");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Sheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Acrobatics")
                        .HasColumnType("boolean");

                    b.Property<bool>("AcrobaticsAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("AcrobaticsDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("AcrobaticsHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnimalHandling")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnimalHandlingAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnimalHandlingDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnimalHandlingHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Arcana")
                        .HasColumnType("boolean");

                    b.Property<bool>("ArcanaAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ArcanaDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("ArcanaHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Athletics")
                        .HasColumnType("boolean");

                    b.Property<bool>("AthleticsAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("AthleticsDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("AthleticsHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<bool>("CharismaBonus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<bool>("ConstitutionBonus")
                        .HasColumnType("boolean");

                    b.Property<int>("Copper")
                        .HasColumnType("integer");

                    b.Property<bool>("Deception")
                        .HasColumnType("boolean");

                    b.Property<bool>("DeceptionAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("DeceptionDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("DeceptionHalf")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<bool>("DexterityBonus")
                        .HasColumnType("boolean");

                    b.Property<int>("Electrum")
                        .HasColumnType("integer");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<bool>("History")
                        .HasColumnType("boolean");

                    b.Property<bool>("HistoryAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HistoryDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("HistoryHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Insight")
                        .HasColumnType("boolean");

                    b.Property<bool>("InsightAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("InsightDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("InsightHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<bool>("IntelligenceBonus")
                        .HasColumnType("boolean");

                    b.Property<bool>("Intimidation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntimidationAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntimidationDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntimidationHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Investigation")
                        .HasColumnType("boolean");

                    b.Property<bool>("InvestigationAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("InvestigationDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("InvestigationHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Medicine")
                        .HasColumnType("boolean");

                    b.Property<bool>("MedicineAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("MedicineDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("MedicineHalf")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Nature")
                        .HasColumnType("boolean");

                    b.Property<bool>("NatureAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("NatureDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("NatureHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Perception")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerceptionAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerceptionDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerceptionHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Performace")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerformaceAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerformaceDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("PerformaceHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Persuasion")
                        .HasColumnType("boolean");

                    b.Property<bool>("PersuasionAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("PersuasionDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("PersuasionHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Platinum")
                        .HasColumnType("integer");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Religion")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReligionAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReligionDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReligionHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Silver")
                        .HasColumnType("integer");

                    b.Property<bool>("SleightOfHands")
                        .HasColumnType("boolean");

                    b.Property<bool>("SleightOfHandsAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("SleightOfHandsDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("SleightOfHandsHalf")
                        .HasColumnType("boolean");

                    b.Property<bool>("Stealth")
                        .HasColumnType("boolean");

                    b.Property<bool>("StealthAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("StealthDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("StealthHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<bool>("StrengthBonus")
                        .HasColumnType("boolean");

                    b.Property<bool>("Survival")
                        .HasColumnType("boolean");

                    b.Property<bool>("SurvivalAdvantage")
                        .HasColumnType("boolean");

                    b.Property<bool>("SurvivalDouble")
                        .HasColumnType("boolean");

                    b.Property<bool>("SurvivalHalf")
                        .HasColumnType("boolean");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.Property<bool>("WisdomBonus")
                        .HasColumnType("boolean");

                    b.Property<int>("lvl")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Sheets");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ShieldTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ca")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedAtId")
                        .HasColumnType("uuid");

                    b.Property<double>("DefaultQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<double>("lb")
                        .HasColumnType("double precision");

                    b.Property<char>("type")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtId");

                    b.ToTable("ShieldTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.WeaponTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<char>("Ability")
                        .HasColumnType("character(1)");

                    b.Property<string>("AtackBonus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedAtId")
                        .HasColumnType("uuid");

                    b.Property<string>("DamageBonus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DefaultQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dices")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<double>("lb")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtId");

                    b.ToTable("WeaponTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassTemplates", b =>
                {
                    b.HasBaseType("DungeonsAndDespair.Aplication.Models.Class");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ClassTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.RaceTemplates", b =>
                {
                    b.HasBaseType("DungeonsAndDespair.Aplication.Models.Race");

                    b.Property<Guid>("CreatedAtId")
                        .HasColumnType("uuid");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<int>("UnLike")
                        .HasColumnType("integer");

                    b.HasIndex("CreatedAtId");

                    b.HasDiscriminator().HasValue("RaceTemplates");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ArmorTemplate", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", "CreatedAt")
                        .WithMany()
                        .HasForeignKey("CreatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAt");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Class", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", null)
                        .WithMany("SubscribedClass")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassCharacteristic", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.ClassCharacteristic", null)
                        .WithMany("SubCharacteristics")
                        .HasForeignKey("ClassCharacteristicId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.Class", null)
                        .WithMany("Characteristics")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Commit", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.ArmorTemplate", null)
                        .WithMany("commits")
                        .HasForeignKey("ArmorTemplateId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.ClassTemplates", null)
                        .WithMany("commits")
                        .HasForeignKey("ClassTemplatesId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.Commit", null)
                        .WithMany("Commits")
                        .HasForeignKey("CommitId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.EquipamentTemplate", null)
                        .WithMany("commits")
                        .HasForeignKey("EquipamentTemplateId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.RaceTemplates", null)
                        .WithMany("commits")
                        .HasForeignKey("RaceTemplatesId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.ShieldTemplate", null)
                        .WithMany("commits")
                        .HasForeignKey("ShieldTemplateId");

                    b.HasOne("DungeonsAndDespair.Aplication.Models.WeaponTemplate", null)
                        .WithMany("commits")
                        .HasForeignKey("WeaponTemplateId");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.EquipamentTemplate", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", "CreatedAt")
                        .WithMany()
                        .HasForeignKey("CreatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAt");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Message", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Race", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.RaceCharacteristic", "Characteristics")
                        .WithMany()
                        .HasForeignKey("CharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", null)
                        .WithMany("SubscribedRace")
                        .HasForeignKey("UserId");

                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Sheet", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonsAndDespair.Aplication.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ShieldTemplate", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", "CreatedAt")
                        .WithMany()
                        .HasForeignKey("CreatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAt");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.WeaponTemplate", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", "CreatedAt")
                        .WithMany()
                        .HasForeignKey("CreatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAt");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassTemplates", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", null)
                        .WithMany("ClassTemplates")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.RaceTemplates", b =>
                {
                    b.HasOne("DungeonsAndDespair.Aplication.Models.User", "CreatedAt")
                        .WithMany("RaceTemplates")
                        .HasForeignKey("CreatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAt");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ArmorTemplate", b =>
                {
                    b.Navigation("commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Class", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassCharacteristic", b =>
                {
                    b.Navigation("SubCharacteristics");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.Commit", b =>
                {
                    b.Navigation("Commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.EquipamentTemplate", b =>
                {
                    b.Navigation("commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ShieldTemplate", b =>
                {
                    b.Navigation("commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.User", b =>
                {
                    b.Navigation("ClassTemplates");

                    b.Navigation("RaceTemplates");

                    b.Navigation("SubscribedClass");

                    b.Navigation("SubscribedRace");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.WeaponTemplate", b =>
                {
                    b.Navigation("commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.ClassTemplates", b =>
                {
                    b.Navigation("commits");
                });

            modelBuilder.Entity("DungeonsAndDespair.Aplication.Models.RaceTemplates", b =>
                {
                    b.Navigation("commits");
                });
#pragma warning restore 612, 618
        }
    }
}
